PluginInfo = {
    Name = 'In Development~TCP Audio Zone',
    Version = '2.0',
    BuildVersion = '0.24.05.07',
    Id = '8bdf6969-9368-0TCP-0AV0-0AUDIO0ZONE0',
    Author = 'Total Concept Projects',
    Description = 'Audio Zone\nAaron | alphathekiwi@gmail.com'
}
function GetPages(props)
    local pages = {{name = "Main"}, {name = "Interface"}}
    return pages
end
-- Defines the Controls used within the plugin
function GetControls(props)
    local ctrls = {}
    table.insert(ctrls, {
        Name = "Audio Output",
        Count = 1,
        ControlType = "Audio",
        UserPin = true,
        PinStyle = "Both",
    })
    return ctrls
end

function GetComponents(props)
    local components = {}
    -- table.insert(components, {
    --     Name = "Matrix Mixer",
    --     Type = "Matrix Mixer",
    --     Properties = {}
    -- })
    table.insert(components, {
        Name = "main_mixer",
        Type = "mixer",
        Properties = {["n_inputs"] = 8, ["n_outputs"] = 2}
    })
    return components
end
function GetWiring(props)
    local wiring = {}
    table.insert(wiring, {"Audio Output", "main_mixer Output 1", "main_mixer Output 2"})
    return wiring
end
-- Layout of controls and graphics for the plugin UI to display
function GetControlLayout(props)
    local page = props['page_index'].Value
    local layout = {}
    local graphics = {}
    if page == 1 then
        table.insert(graphics, {
            Type = 'GroupBox',
            Fill = {20, 20, 70, 50},
            StrokeWidth = 0,
            CornerRadius = 0,
            Position = {5, 5},
            Size = {616, 148}
        })

        table.insert(graphics, {
            Position = {9, 9},
            Size = {148, 24},
            Type = 'Text',
            Text = 'Device IP',
            FontSize = 14,
            HTextAlign = 'Center'
        })
        table.insert(graphics, {
            Position = {161, 9},
            Size = {68, 24},
            Type = 'Text',
            Text = 'Port',
            FontSize = 14,
            HTextAlign = 'Center'
        })
        table.insert(graphics, {
            Position = {233, 9},
            Size = {76, 24},
            Type = 'Text',
            Text = 'State',
            FontSize = 14,
            HTextAlign = 'Center'
        })

        layout["Audio Output"] = {
            Position = {9, 37},
            Size = {148, 24},
            FontSize = 14,
            Margin = 0,
            Padding = 2,
            StrokeWidth = 0
        }
        layout['main_mixer Input 1 Gain'] = {
            Position = {161, 37},
            Size = {68, 24},
            FontSize = 14,
            Margin = 0,
            Padding = 2,
            StrokeWidth = 0
        }
        layout['main_mixer Input.1.Gain'] = {
            Position = {233, 37},
            Size = {76, 24},
            FontSize = 14,
            Margin = 0,
            Padding = 2,
            StrokeWidth = 0,
            Color = {255, 150, 65}
        }

        layout['main_mixer input.1.gain'] = {
            Position = {313, 9},
            Size = {300, 24},
            FontSize = 14,
            Margin = 0,
            Padding = 2,
            StrokeWidth = 0,
            Legend = 'Load Commands',
            Color = {0, 0, 0, 0}
        }
        layout['File Path'] = {
            Position = {313, 37},
            Size = {300, 24},
            FontSize = 14,
            Margin = 0,
            Padding = 2,
            StrokeWidth = 0
        }

        table.insert(graphics, {
            Position = {9, 65},
            Size = {148, 24},
            Type = 'Text',
            Text = 'Trunk CMDs',
            FontSize = 14,
            HTextAlign = 'Center'
        })
        layout['Trunk CMDs'] = {
            Position = {9, 93},
            Size = {148, 24},
            FontSize = 10,
            Margin = 0,
            Padding = 2,
            StrokeWidth = 0
        }
        for i = 1, 3 do
            table.insert(graphics, {
                Position = {9 + i * 152, 65},
                Size = {148, 24},
                Type = 'Text',
                Text = 'IR Head CMD ' .. i,
                FontSize = 14,
                HTextAlign = 'Center'
            })
            layout['Irhead CMD ' .. i] = {
                Position = {9 + i * 152, 93},
                Size = {148, 24},
                FontSize = 10,
                Margin = 0,
                Padding = 2,
                StrokeWidth = 0,
                PrettyName = 'IRhead ' .. i
            }
            layout['Current Channel ' .. i] = {
                Position = {9 + i * 152, 121},
                Size = {148, 24},
                FontSize = 14,
                Margin = 0,
                Padding = 2,
                StrokeWidth = 0
            }
        end
        table.insert(graphics, {
            Position = {9, 121},
            Size = {148, 24},
            Type = 'Text',
            Text = 'Current Channel',
            FontSize = 14,
            HTextAlign = 'Right'
        })
    else
        
    end
    return layout, graphics
end
-- Define the color of the plugin object in the design
function GetColor(props) return {255, 65, 150} end
-- The name that will initially display when dragged into a design
function GetPrettyName(props) return 'Audio Zone' end
-- Define User configurable Properties of the plugin
function GetProperties()
    local props = {}
    table.insert(props, {
        Name = 'Number Sources',
        Type = 'integer',
        Min = 1,
        Max = 120,
        Value = 8
    })
    table.insert(props, {
        Name = 'Number Mics',
        Type = 'integer',
        Min = 0,
        Max = 8,
        Value = 4
    })
    table.insert(props, {
        Name = 'Debug Print',
        Type = 'enum',
        Value = 'None',
        Choices = {'None', 'Tx/Rx', 'Tx', 'Rx', 'Function Calls', 'All'}
    })
    return props
end
-- Optional function to update available properties when properties are altered by the user
function RectifyProperties(props)
    props['Debug Print'].IsHidden = (props.plugin_show_debug.Value == false)
    return props
end
-- Start event based logic
if Controls then end
